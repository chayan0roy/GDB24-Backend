














































































router.post('/sendUserPasswordResetEmail', async (req, res) => {
    try {
        const { email } = req.body;
        if (!email) {
            return res.status(400).json({ status: "failed", message: "Email field is required" });
        }
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ status: "failed", message: "Email doesn't exist" });
        }

        sendPasswordVerificationEmail(req, res, user);

        res.status(200).json({ status: true, message: "Password reset email sent. Please check your email." });
    } catch (error) {
        console.log(error);
        res.status(500).json({ status: "failed", message: "Unable to send password reset email. Please try again later." });
    }
})

// // Password Reset
router.post('/userPasswordReset/:id/:token', async (req, res) => {
    try {
        const { newPassword, confromPassword } = req.body;
        const { id, token } = req.params;

        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ status: "failed", message: "User not found" });
        }

        const new_secret = user._id + process.env.JWT_TOKEN_SECRET_KEY;
        jwt.verify(token, new_secret);

        if (!newPassword || !confromPassword) {
            return res.status(400).json({ status: "failed", message: "New Password and Confirm New Password are required" });
        }

        if (newPassword !== confromPassword) {
            return res.status(400).json({ status: "failed", message: "New Password and Confirm New Password don't match" });
        }

        const salt = await bcrypt.genSalt(Number(process.env.SALT));
        const hashedPassword = await bcrypt.hash(newPassword, salt);

        await User.findByIdAndUpdate(user._id, { $set: { password: hashedPassword } });

        res.status(200).json({ status: true, message: "Password reset successfully" });
    } catch (error) {
        console.log(error);
        if (error.name === "TokenExpiredError") {
            return res.status(400).json({ status: "failed", message: "Token expired. Please request a new password reset link." });
        }
        return res.status(500).json({ status: "failed", message: "Unable to reset password. Please try again later." });
    }
});


// User Email Verification
router.post('/verifyEmail', async (req, res) => {
    try {
        const { email, otp } = req.body;

        if (!email || !otp) {
            return res.status(400).json({ status: "failed", message: "All fields are required" });
        }

        const existingUser = await User.findOne({ email });

        if (!existingUser) {
            return res.status(404).json({ status: "failed", message: "Email doesn't exists" });
        }

        if (existingUser.is_verified) {
            return res.status(400).json({ status: "failed", message: "Email is already verified" });
        }

        const emailVerification = await EmailVerificationModel.findOne({ userId: existingUser._id, otp });
        if (!emailVerification) {
            if (!existingUser.is_verified) {
                await sendEmail(req, res, existingUser)
                return res.status(400).json({ status: "failed", message: "Invalid OTP, new OTP sent to your email" });
            }
            return res.status(400).json({ status: "failed", message: "Invalid OTP" });
        }

        const currentTime = new Date();
        const expirationTime = new Date(emailVerification.createdAt.getTime() + 15 * 60 * 1000);
        if (currentTime > expirationTime) {
            await sendEmail(req, res, existingUser)
            return res.status(400).json({ status: "failed", message: "OTP expired, new OTP sent to your email" });
        }

        existingUser.is_verified = true;
        await existingUser.save();

        const { auth_token } = await generateTokens(existingUser)

        await EmailVerificationModel.deleteMany({ userId: existingUser._id });
        res.status(200).json({
            status: true,
            role: existingUser.role,
            auth_token
        });
    } catch (error) {
        console.log(error);
        res.status(500).json({ status: "failed", message: "Unable to verify email, please try again later" });
    }
})

























//sendPasswordVerificationEmail.js


const dotenv = require("dotenv");
const jwt = require('jsonwebtoken');
const nodemailer = require("nodemailer");
dotenv.config();

let transporter = nodemailer.createTransport({
	host: process.env.SMTP_HOST,
	port: process.env.SMTP_PORT,
	secure: process.env.SMTP_PORT == 465,
	auth: {
		user: process.env.SMTP_MAIL,
		pass: process.env.SMTP_PASSWORD,
	},
});

const sendPasswordVerificationEmail = async (req, res, user) => {

	const secret = user._id + process.env.JWT_TOKEN_SECRET_KEY;
	const token = jwt.sign({ userID: user._id }, secret, { expiresIn: '15m' });

	const resetLink = `${process.env.FRONTEND_HOST}/PasswordChange/${user._id}/${token}`;

	const mailOptions = {
		from: process.env.SMTP_MAIL,
		to: user.email,
		subject: "Password Reset Link",
		html: `<p>Hello ${user.name},</p><p>Please <a href="${resetLink}">click here</a> to reset your password.</p>`
	};

	await transporter.sendMail(mailOptions);
};

module.exports = sendPasswordVerificationEmail;
